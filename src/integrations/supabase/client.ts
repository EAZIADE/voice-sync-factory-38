
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cvfqcvytoobplgracobg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN2ZnFjdnl0b29icGxncmFjb2JnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwMTY4NjksImV4cCI6MjA1ODU5Mjg2OX0.k6ho8-LWVYgMAbmu2_pViojgJN51FoWdPREqD-p9htw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Storage bucket helpers for podcast media files
export const ensurePodcastsBucketExists = async (): Promise<boolean> => {
  try {
    // Check if the bucket exists
    const { data: buckets } = await supabase.storage.listBuckets();
    const podcastsBucket = buckets?.find(bucket => bucket.name === 'podcasts');
    
    if (!podcastsBucket) {
      // Create the bucket if it doesn't exist
      const { error } = await supabase.storage.createBucket('podcasts', {
        public: true,
        fileSizeLimit: 100 * 1024 * 1024 // 100MB limit
      });
      
      if (error) {
        console.error('Error creating podcasts bucket:', error);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring podcasts bucket exists:', error);
    return false;
  }
};

export const getMediaUrl = (projectId: string, fileType: 'audio' | 'video'): string => {
  const extension = fileType === 'audio' ? 'mp3' : 'mp4';
  const path = `${projectId}/${fileType}.${extension}`;
  
  const { data } = supabase.storage.from('podcasts').getPublicUrl(path);
  return data.publicUrl;
};

export const checkMediaFileExists = async (projectId: string, fileType: 'audio' | 'video'): Promise<boolean> => {
  try {
    const extension = fileType === 'audio' ? 'mp3' : 'mp4';
    const path = `${projectId}/${fileType}.${extension}`;
    
    const { data } = await supabase.storage.from('podcasts').list(projectId, {
      limit: 10,
      offset: 0,
      sortBy: { column: 'name', order: 'asc' }
    });
    
    return data ? data.some(file => file.name === `${fileType}.${extension}`) : false;
  } catch (error) {
    console.error(`Error checking if ${fileType} file exists:`, error);
    return false;
  }
};

export const downloadMediaFile = async (projectId: string, fileType: 'audio' | 'video'): Promise<void> => {
  try {
    const extension = fileType === 'audio' ? 'mp3' : 'mp4';
    const path = `${projectId}/${fileType}.${extension}`;
    
    const { data, error } = await supabase.storage.from('podcasts').download(path);
    
    if (error) {
      throw error;
    }
    
    const url = URL.createObjectURL(data);
    const a = document.createElement('a');
    a.href = url;
    a.download = `podcast-${fileType}-${projectId}.${extension}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error(`Error downloading ${fileType} file:`, error);
    throw new Error(`Failed to download ${fileType} file`);
  }
};

export const deleteMediaFile = async (projectId: string): Promise<void> => {
  try {
    // Delete both audio and video files
    const { error: audioError } = await supabase.storage
      .from('podcasts')
      .remove([`${projectId}/audio.mp3`]);
      
    if (audioError) {
      console.warn('Warning: Could not delete audio file:', audioError);
    }
    
    const { error: videoError } = await supabase.storage
      .from('podcasts')
      .remove([`${projectId}/video.mp4`]);
      
    if (videoError) {
      console.warn('Warning: Could not delete video file:', videoError);
    }
  } catch (error) {
    console.error('Error deleting media files:', error);
    throw new Error('Failed to delete media files');
  }
};
